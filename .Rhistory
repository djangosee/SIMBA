newData <- subset(newData, newData[,input$Tissue]==input$tissuecat)
rownames(newData) <- newData[,input$id]
newData
if(provador==T){newDat <- newData}
newDataFact <- newDat[,input$factors]
colnames(newDataFact) <- input$factors
df <- data.frame(newDataFact[,input$covariables],
row.names=rownames(newDataFact))
df
colnames(df) <- as.character(input$covariables)
newDataFact <- newDat[,input$factors]
if(provador==T){newDat <- newData}
newDataFact <- newDat[,input$factors]
newDat
input$factors
input$factors <- c("Sample ID","Group","Treatment","Tissue")
if(provador==T){dat <- newData}
bad.sample <- list()
##Bye bye NA's
for(i in 1:length(levels(as.factor(unlist(dat[,input$covariables]))))){
datCat <- subset(dat, dat[,input$covariables]==levels(as.factor(unlist(dat[,input$covariables])[i])))
bad.sample[[i]]<- colMeans(is.na(datCat)) > input$NAInput
}
newData <- as.data.frame(dat[,!colnames(dat) %in% unique(names(which(unlist(bad.sample)==T)))])
newData <- subset(newData, newData[,input$Tissue]==input$tissuecat)
rownames(newData) <- newData[,input$id]
newData
if(provador==T){newDat <- newData}
newDataFact <- newDat[,input$factors]
newDataFact
colnames(newDataFact) <- input$factors
df <- data.frame(newDataFact[,input$covariables],
row.names=rownames(newDataFact))
df
colnames(df) <- as.character(input$covariables)
df
nrow(df)
idx <- match(input$factors, names(newDat))
idx <- sort(c(idx-1, idx))
data.idx <- newDat[,-idx]
data.idx <- apply(data.idx,2,function(x) as.numeric(x))
nrow(data.idx)
nw <- log10(data.idx)
nw
rownames(nw) <- rownames(data.idx)
nw
colnames(nw) <- colnames(data.idx)
#nw <- subset(newData, colnames(newData) %in% input$factors)
Expression <- ExpressionSet(as.matrix(t(nw)),phenoData = AnnotatedDataFrame(data=df))
df
nw
data.idx
idx <- match(input$factors, names(newDat))
idx <- sort(c(idx-1, idx))
data.idx <- newDat[,-idx]
data.idx
data.idx <- newDat[,-idx]
data.idx2 <- apply(data.idx,2,function(x) as.numeric(x))
nw <- log10(data.idx2)
rownames(nw) <- rownames(data.idx)
colnames(nw) <- colnames(data.idx)
#nw <- subset(newData, colnames(newData) %in% input$factors)
Expression <- ExpressionSet(as.matrix(t(nw)),phenoData = AnnotatedDataFrame(data=df))
Expression
#Aixo es per treballar desde el Rstudio
script.dirname <- "/home/toni/TFGShinyApp/"
source(paste0(script.dirname,"/init.R")) # Script per obrir tots els paquets necesaris
source(paste0(script.dirname,"/ui.R")) # User Interface
source(paste0(script.dirname,"/server.R")) #Server
options(warn=-1)
shinyApp(ui = ui, server = server, options = c(launch.browser=T))
#Aixo es per treballar desde el Rstudio
script.dirname <- "/home/toni/TFGShinyApp/"
source(paste0(script.dirname,"/init.R")) # Script per obrir tots els paquets necesaris
source(paste0(script.dirname,"/ui.R")) # User Interface
source(paste0(script.dirname,"/server.R")) #Server
options(warn=-1)
shinyApp(ui = ui, server = server, options = c(launch.browser=T))
if(provador==T){Express <- Expression}
tt=rowFtests(Express,as.factor(pData(Express)[,input$covariables]))
tt
p.BH = p.adjust(tt[,"p.value"], "BH" )
tt <- cbind(tt,p.BH)
tt
functions$Gens %in% rownames(tt)
functions<- functions[functions$Gens %in% rownames(tt),]
f
functions
paste0(functions$Funcions,"_",functions$Gens)
rownames(tt)
nw
tt=rowFtests(Express,as.factor(pData(Express)[,input$covariables]))
tt
p.BH = p.adjust(tt[,"p.value"], "BH" )
tt <- cbind(tt,p.BH)
tt
functions$Gens %in% rownames(tt)
functions<- functions[functions$Gens %in% rownames(tt),]
functions
rownames(tt)
paste0(functions$Funcions,"_",functions$Gens)
functions$Funcions
functions$Gens
functions[functions$Gens %in% rownames(tt),]
functions$Gens
#####
#Provador
####
provador=T
if(provador){
input <- list()
newData <-  read_xlsx("~/Descargas/Database_AGL_H3.xlsx",col_names = TRUE,sheet = 1)
functions <- read_xlsx("~/Descargas/Database_AGL_H3.xlsx",col_names = TRUE,sheet = 2)
input$factors <- c("Sample ID","Group","Treatment","Tissue")
input$covariables <- c("Treatment")
input$Tissue <- c("Tissue")
input$tissuecat <- c("Jejunum")
input$alphaTukey <- 0.1
input$NAInput <- 0.5
input$id <- "Sample ID"
}
if(provador==T){dat <- newData}
bad.sample <- list()
##Bye bye NA's
for(i in 1:length(levels(as.factor(unlist(dat[,input$covariables]))))){
datCat <- subset(dat, dat[,input$covariables]==levels(as.factor(unlist(dat[,input$covariables])[i])))
bad.sample[[i]]<- colMeans(is.na(datCat)) > input$NAInput
}
newData <- as.data.frame(dat[,!colnames(dat) %in% unique(names(which(unlist(bad.sample)==T)))])
newData <- subset(newData, newData[,input$Tissue]==input$tissuecat)
rownames(newData) <- newData[,input$id]
newData
if(provador==T){newDat <- newData}
newDataFact <- newDat[,input$factors]
colnames(newDataFact) <- input$factors
df <- data.frame(newDataFact[,input$covariables],
row.names=rownames(newDataFact))
colnames(df) <- as.character(input$covariables)
idx <- match(input$factors, names(newDat))
idx <- sort(c(idx-1, idx))
data.idx <- newDat[,-idx]
data.idx2 <- apply(data.idx,2,function(x) as.numeric(x))
nw <- log10(data.idx2)
rownames(nw) <- rownames(data.idx)
colnames(nw) <- colnames(data.idx)
#nw <- subset(newData, colnames(newData) %in% input$factors)
Expression <- ExpressionSet(as.matrix(t(nw)),phenoData = AnnotatedDataFrame(data=df))
Expression
if(provador==T){Express <- Expression}
tt=rowFtests(Express,as.factor(pData(Express)[,input$covariables]))
p.BH = p.adjust(tt[,"p.value"], "BH" )
tt <- cbind(tt,p.BH)
functions<- functions[functions$Gens %in% rownames(tt),]
rownames(tt) <- paste0(functions$Funcions,"_",functions$Gens)
tt
paste0(functions$Funcions,"_",functions$Gens)
rownames(tt)
functions$Gens
#####
#Provador
####
provador=T
if(provador){
input <- list()
newData <-  read_xlsx("~/Descargas/Database_AGL_H3.xlsx",col_names = TRUE,sheet = 1)
functions <- read_xlsx("~/Descargas/Database_AGL_H3.xlsx",col_names = TRUE,sheet = 2)
input$factors <- c("Sample ID","Group","Treatment","Tissue")
input$covariables <- c("Treatment")
input$Tissue <- c("Tissue")
input$tissuecat <- c("Jejunum")
input$alphaTukey <- 0.1
input$NAInput <- 0.5
input$id <- "Sample ID"
}
functions
dat <- dt()
if(provador==T){dat <- newData}
bad.sample <- list()
##Bye bye NA's
for(i in 1:length(levels(as.factor(unlist(dat[,input$covariables]))))){
datCat <- subset(dat, dat[,input$covariables]==levels(as.factor(unlist(dat[,input$covariables])[i])))
bad.sample[[i]]<- colMeans(is.na(datCat)) > input$NAInput
}
newData <- as.data.frame(dat[,!colnames(dat) %in% unique(names(which(unlist(bad.sample)==T)))])
newData <- subset(newData, newData[,input$Tissue]==input$tissuecat)
rownames(newData) <- newData[,input$id]
newData
newDat <- newData()
if(provador==T){newDat <- newData}
newDataFact <- newDat[,input$factors]
colnames(newDataFact) <- input$factors
df <- data.frame(newDataFact[,input$covariables],
row.names=rownames(newDataFact))
colnames(df) <- as.character(input$covariables)
idx <- match(input$factors, names(newDat))
idx <- sort(c(idx-1, idx))
data.idx <- newDat[,-idx]
data.idx2 <- apply(data.idx,2,function(x) as.numeric(x))
nw <- log10(data.idx2)
rownames(nw) <- rownames(data.idx)
colnames(nw) <- colnames(data.idx)
#nw <- subset(newData, colnames(newData) %in% input$factors)
Expression <- ExpressionSet(as.matrix(t(nw)),phenoData = AnnotatedDataFrame(data=df))
Expression
if(provador==T){Express <- Expression}
tt=rowFtests(Express,as.factor(pData(Express)[,input$covariables]))
tt
p.BH = p.adjust(tt[,"p.value"], "BH" )
tt <- cbind(tt,p.BH)
functions<- functions[functions$Gens %in% rownames(tt),]
functions
rownames(tt) <- paste0(functions$Funcions,"_",functions$Gens)
paste0(functions$Funcions,"_",functions$Gens)
functions
functions$Gens
functions <- read_xlsx("~/Descargas/Database_AGL_H3.xlsx",col_names = TRUE,sheet = 2)
functions$Gens
rownames(tt)
#####
#Provador
####
provador=T
if(provador){
input <- list()
newData <-  read_xlsx("~/Descargas/Database_AGL_H3.xlsx",col_names = TRUE,sheet = 1)
functions <- read_xlsx("~/Descargas/Database_AGL_H3.xlsx",col_names = TRUE,sheet = 2)
input$factors <- c("Sample ID","Group","Treatment","Tissue")
input$covariables <- c("Treatment")
input$Tissue <- c("Tissue")
input$tissuecat <- c("Jejunum")
input$alphaTukey <- 0.1
input$NAInput <- 0.5
input$id <- "Sample ID"
}
if(provador==T){dat <- newData}
bad.sample <- list()
##Bye bye NA's
for(i in 1:length(levels(as.factor(unlist(dat[,input$covariables]))))){
datCat <- subset(dat, dat[,input$covariables]==levels(as.factor(unlist(dat[,input$covariables])[i])))
bad.sample[[i]]<- colMeans(is.na(datCat)) > input$NAInput
}
newData <- as.data.frame(dat[,!colnames(dat) %in% unique(names(which(unlist(bad.sample)==T)))])
newData <- subset(newData, newData[,input$Tissue]==input$tissuecat)
rownames(newData) <- newData[,input$id]
newData
if(provador==T){newDat <- newData}
newDataFact <- newDat[,input$factors]
colnames(newDataFact) <- input$factors
df <- data.frame(newDataFact[,input$covariables],
row.names=rownames(newDataFact))
colnames(df) <- as.character(input$covariables)
idx <- match(input$factors, names(newDat))
idx <- sort(c(idx-1, idx))
data.idx <- newDat[,-idx]
data.idx2 <- apply(data.idx,2,function(x) as.numeric(x))
nw <- log10(data.idx2)
rownames(nw) <- rownames(data.idx)
colnames(nw) <- colnames(data.idx)
#nw <- subset(newData, colnames(newData) %in% input$factors)
Expression <- ExpressionSet(as.matrix(t(nw)),phenoData = AnnotatedDataFrame(data=df))
if(provador==T){Express <- Expression}
tt=rowFtests(Express,as.factor(pData(Express)[,input$covariables]))
p.BH = p.adjust(tt[,"p.value"], "BH" )
tt <- cbind(tt,p.BH)
functions<- functions[functions$Gens %in% rownames(tt),]
functions$Gens
rownames(tt) <- paste0(functions$Funcions,"_",functions$Gens)
tt
#Aixo es per treballar desde el Rstudio
script.dirname <- "/home/toni/TFGShinyApp/"
source(paste0(script.dirname,"/init.R")) # Script per obrir tots els paquets necesaris
source(paste0(script.dirname,"/ui.R")) # User Interface
source(paste0(script.dirname,"/server.R")) #Server
options(warn=-1)
shinyApp(ui = ui, server = server, options = c(launch.browser=T))
#Aixo es per treballar desde el Rstudio
script.dirname <- "/home/toni/TFGShinyApp/"
source(paste0(script.dirname,"/init.R")) # Script per obrir tots els paquets necesaris
source(paste0(script.dirname,"/ui.R")) # User Interface
source(paste0(script.dirname,"/server.R")) #Server
options(warn=-1)
shinyApp(ui = ui, server = server, options = c(launch.browser=T))
#Aixo es per treballar desde el Rstudio
script.dirname <- "/home/toni/TFGShinyApp/"
source(paste0(script.dirname,"/init.R")) # Script per obrir tots els paquets necesaris
source(paste0(script.dirname,"/ui.R")) # User Interface
source(paste0(script.dirname,"/server.R")) #Server
options(warn=-1)
shinyApp(ui = ui, server = server, options = c(launch.browser=T))
if(provador==T){
newDat <- newData;
Covariable<- as.factor(pData(Expression)[,input$covariables])
nomscols <- functions[functions$Gens %in% rownames(Expression),"Funcions"]
Covariable <- as.data.frame(Covariable)
}
nomscols <- data.frame("Funcions"=functions[functions$Gens %in% rownames(exprs(dataExpression())),"Funcions"])
nomscols
Covariable
Covariable
divergent_viridis_magma <- c(viridis(10, begin = 0.3), rev(magma(10, begin = 0.3)))
rwb <- colorRampPalette(colors = c("darkred", "white", "darkgreen"))
BrBG <- colorRampPalette(brewer.pal(11, "BrBG"))
Spectral <- colorRampPalette(rev(brewer.pal(40, "Spectral")))
heatmaply(exprs(dataExpression()),colors=Spectral,na.value = "grey50",na.rm=F,col_side_colors=Covariable,row_side_colors = nomscols,margins = c(120,120,20,120),seriate = "OLO") %>%
colorbar(tickfont = list(size = 10), titlefont = list(size = 10), which = 1) %>%
colorbar(tickfont = list(size = 10), titlefont = list(size = 10), which = 2)
heatmaply(exprs(Expression),colors=Spectral,na.value = "grey50",na.rm=F,col_side_colors=Covariable,row_side_colors = nomscols,margins = c(120,120,20,120),seriate = "OLO") %>%
colorbar(tickfont = list(size = 10), titlefont = list(size = 10), which = 1) %>%
colorbar(tickfont = list(size = 10), titlefont = list(size = 10), which = 2)
exprs(Expression)
str(exprs(Expression))
library(nlme)
dades<- read.delim("~/Documentos/EntregaFInal/dades.txt",header=T)
dades.long <- groupedData(CD4 ~ month | id, dades)
dat <- reshape(dades, idvar = "id",v.names="month", timevar = "month", direction = "wide")[,-c(1:3)]
dades.wide <- as.data.frame(matrix(dades$CD4,nrow=nrow(dades),ncol=6,byrow=T))
dades.wide <- cbind(1:nrow(dades.wide),dades.wide)
# length(which(dades$group=="control"))/6
# length(which(dades$group=="one drug"))/6
# length(which(dades$group=="two drugs"))/6
# dades.wide$group <- c(rep("Control",40),rep("One drug",40),rep("Two drugs",40))
colnames(dades.wide) <- c("ID",paste0("Month",seq(0,10,by=2)))
#### 2 formats
head(dades.long)
head(dades.wide)
#### 2 formats
head(dades.long)
with(data.long,interaction.plot(month,id,CD4))
with(dades.long,interaction.plot(month,id,CD4))
dades.long <- aggregate(CD4~month+group,data=dades.long,mean)
with(dades.long,interaction.plot(month,group,CD4),col=c("red","green","blue"),
legend=F)
with(dades.long,interaction.plot(month,group,CD4,col=c("red","green","blue"),
legend=F))
group
dades.long
legend("bottomleft",lty=1,c("control","one drug","two drugs"))
legend("bottomleft",lty=1,c("control","one drug","two drugs"),col=c("red","green","blue"))
legend("bottomleft",lty=c(1,2,3),c("control","one drug","two drugs"),col=c("red","green","blue"))
legend("bottomleft",lty=c(3,2,1),c("control","one drug","two drugs"),col=c("red","green","blue"))
dades.long <- aggregate(CD4~month+group,data=dades.long,max)
with(dades.long,interaction.plot(month,group,CD4,col=c("red","green","blue"),
legend=F))
legend("bottomleft",lty=c(3,2,1),c("control","one drug","two drugs"),col=c("red","green","blue"))
dades.long <- groupedData(CD4 ~ month | id, dades)
dades.long.ag <- aggregate(CD4~month+group,data=dades.long,max)
with(dades.long.ag,interaction.plot(month,group,CD4,col=c("red","green","blue"),
legend=F))
legend("bottomleft",lty=c(3,2,1),c("control","one drug","two drugs"),col=c("red","green","blue"))
dades.long.ag <- aggregate(CD4~month+group,data=dades.long,median)
with(dades.long.ag,interaction.plot(month,group,CD4,col=c("red","green","blue"),
legend=F))
legend("bottomleft",lty=c(3,2,1),c("control","one drug","two drugs"),col=c("red","green","blue"))
#### 2 formats
ktable(head(dades.long))
library(knitr)
#### 2 formats
ktable(head(dades.long))
#### 2 formats
kable(head(dades.long))
kable(head(dades.wide))
dades.long.ag <- aggregate(CD4~month+group,data=dades.long,mean)
with(dades.long.ag,interaction.plot(month,group,CD4,col=c("red","green","blue"),
legend=F))
legend("bottomleft",lty=c(3,2,1),c("control","one drug","two drugs"),col=c("red","green","blue"))
dades.long.ag <- aggregate(CD4~month+group,data=dades.long,mean)
with(dades.long.ag,interaction.plot(month,group,CD4,col=c("red","green","blue"),
legend=F,main="Interaction plot by group"),cex.main=0.8)
legend("bottomleft",lty=c(3,2,1),c("control","one drug","two drugs"),col=c("red","green","blue"),cex=0.8)
with(dades.long.ag,interaction.plot(month,group,CD4,col=c("red","green","blue"),
legend=F,main="Interaction plot by group"),cex.main=0.6)
with(dades.long.ag,interaction.plot(month,group,CD4,col=c("red","green","blue"),
legend=F,main="Interaction plot by group",cex.main=0.6))
with(dades.long.ag,interaction.plot(month,group,CD4,col=c("red","green","blue"),
legend=F,main="Interaction plot by group",cex.main=0.6,cex.lab=0.6))
with(dades.long.ag,interaction.plot(month,group,CD4,col=c("red","green","blue"),
legend=F,main="Interaction plot by group",cex.main=0.6,cex.lab=0.6,cex.axis=0.6))
legend("bottomleft",lty=c(3,2,1),c("control","one drug","two drugs"),col=c("red","green","blue"),cex=0.6)
with(dades.long.ag,interaction.plot(month,group,CD4,col=c("black","grey","grey40"),
legend=F,main="Interaction plot by group",cex.main=0.6,cex.lab=0.6,cex.axis=0.6))
datlist<- list()
datlist$data <- dades.wide
times <- as.data.frame(matrix(rep(1:6,720),ncol=6,byrow=T))
times <- cbind(1:nrow(times),times)
colnames(times) <-  c("ID",paste0("Month",seq(0,10,by=2)))
datlist$time <- times
s1 = step1measures(datlist$data, datlist$time, ID = TRUE)
s2 = step2factors(s1)
s3 = step3clusters(s2)
#clustering trajectories
#traj method
# install.packages("traj")
library(traj)
s1 = step1measures(datlist$data, datlist$time, ID = TRUE)
s2 = step2factors(s1)
s3 = step3clusters(s2)
plotCombTraj(s3)
par(mfrow=c(1,1))
plotCombTraj(s3)
s3$clusters
subset(s3$clusters,s3$clusters$ID==1)
subset(s3$clusters,s3$clusters$cluster==1)
ids2 <- subset(s3$clusters,s3$clusters$cluster==2)
dades.long[ids,]
ids <- subset(s3$clusters,s3$clusters$cluster==1)
ids2 <- subset(s3$clusters,s3$clusters$cluster==2)
dades.long[ids,]
dades.long
ids
dades.long[ids$ID,]
ids
dades.wide[ids$ID,]
dades.wide[ids2$ID,]
c1 <- dades.wide[ids$ID,]
c2 <- dades.wide[ids2$ID,]
subset(dades.long,dades.long$id==ids$ID)
ids$ID
dades.long$id
dades.long$id==ids$ID
ids$ID %in% dades.long$id
dades.long$id %in% ids$ID
subset(dades.long, dades.long$id %in% ids$ID )
c2 <- subset(dades.long,dades.long$id %in% ids2$ID)
par(mfrow=c(1,2))
dades.long.ag.c1 <- aggregate(CD4~month+group,data=c1,mean)
with(dades.long.ag.c1,interaction.plot(month,group,CD4,
col=c("black","grey","grey40"),
legend=F,main="Interaction plot by group",cex.main=0.6,cex.lab=0.6,cex.axis=0.6))
legend("bottomleft",lty=c(3,2,1),
c("control","one drug","two drugs"),
col=c("black","grey","grey40"),cex=0.6)
dades.long.ag.c2 <- aggregate(CD4~month+group,data=c2,mean)
with(dades.long.ag.c2,interaction.plot(month,group,CD4,
col=c("black","grey","grey40"),
legend=F,main="Interaction plot by group",cex.main=0.6,cex.lab=0.6,cex.axis=0.6))
legend("bottomleft",lty=c(3,2,1),
c("control","one drug","two drugs"),
col=c("black","grey","grey40"),cex=0.6)
c1 <- subset(dades.long, dades.long$id %in% ids$ID )
c2 <- subset(dades.long,dades.long$id %in% ids2$ID)
par(mfrow=c(1,2))
dades.long.ag.c1 <- aggregate(CD4~month+group,data=c1,mean)
with(dades.long.ag.c1,interaction.plot(month,group,CD4,
col=c("black","grey","grey40"),
legend=F,main="Interaction plot by group",cex.main=0.6,cex.lab=0.6,cex.axis=0.6))
legend("bottomleft",lty=c(3,2,1),
c("control","one drug","two drugs"),
col=c("black","grey","grey40"),cex=0.6)
dades.long.ag.c2 <- aggregate(CD4~month+group,data=c2,mean)
with(dades.long.ag.c2,interaction.plot(month,group,CD4,
col=c("black","grey","grey40"),
legend=F,main="Interaction plot by group",cex.main=0.6,cex.lab=0.6,cex.axis=0.6))
legend("bottomleft",lty=c(3,2,1),
c("control","one drug","two drugs"),
col=c("black","grey","grey40"),cex=0.6)
datlist<- list()
datlist$data <- dades.wide
times <- as.data.frame(matrix(rep(1:6,720),ncol=6,byrow=T))
times <- cbind(1:nrow(times),times)
colnames(times) <-  c("ID",paste0("Month",seq(0,10,by=2)))
datlist$time <- times
s1 = step1measures(datlist$data, datlist$time, ID = TRUE)
s3 = step3clusters(s2,nclusters = 2)
dades.long.ag.c1
#Modelo de intercept aleatorio
mod.lme <- lme(CD4 ~ month + group, c1, random = ~1)
summary(mod.lme)
#Modelo interept pendiente aleatoria
mod.lme2 <- lme(CD4~month+group,c1,dades.s)
#Modelo interept pendiente aleatoria
mod.lme2 <- lme(CD4~month+group,c1,c1)
#Modelo interept pendiente aleatoria
mod.lme2 <- lme(CD4~month+group,c1)
summary(mod.lme2)
#Modelo de intercept aleatorio
mod.lme <- lme(CD4 ~ month + group+ group*month, c1, random = ~1)
mod.lme
summary(mod.lme)
#Modelo interept pendiente aleatoria
mod.lme2 <- lme(CD4~month+group+group*month,c1)
summary(mod.lme2)
mod.lme2 <- lme(CD4 ~ month + group+ group*month, c2, random = ~1)
summary(mod.lme2)
summary(mod.lme)
mod.lme <- lme(CD4 ~ month + group+ group*month, c1, random = ~1)
summary(mod.lme)
mod.lme2 <- lme(CD4 ~ month + group+ group*month, c2, random = ~1)
summary(mod.lme2)
mod.lme3 <- lme(CD4 ~ month + group+ group*month, dades.long, random = ~1)
summary(mod.lme3)
##Modelos mixtos
library(stargazer)
##Modelos mixtos
install.packages("stargazer")
library(stargazer)
stargazer(mod.lme3,mod.lme,mod.lme2)
#Modelo de intercept aleatorio
DF <- within(c1, group <- relevel(c1, ref = "Two drugs"))
#Modelo de intercept aleatorio
DF <- within(c1, group <- relevel(group, ref = "Two drugs"))
#Modelo de intercept aleatorio
DF <- within(c1, group <- relevel(group, ref = 3))
DF
mod.lme <- lme(CD4 ~ month + group+ group*month, DF, random = ~1)
summary(mod.lme)
DF <- within(c1, group <- relevel(group, ref = 3))
mod.lme <- lme(CD4 ~ month + group+ group*month, DF, random = ~1)
DF2 <- within(c2, group <- relevel(group, ref = 3))
mod.lme2 <- lme(CD4 ~ month + group+ group*month, DF2, random = ~1)
DF3 <- within(dades.long, group <- relevel(group, ref = 3))
mod.lme3 <- lme(CD4 ~ month + group+ group*month, DF3, random = ~1)
setwd("~/TFGShinyApp")
